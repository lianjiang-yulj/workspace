// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* ResultFormatCBanerPb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultFormatCBanerPb_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultFormatCBanerPb_Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultFormatCBanerPb_Meta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultFormatCBanerPb_Doc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultFormatCBanerPb_Doc_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  ResultFormatCBanerPb_descriptor_ = file->message_type(0);
  static const int ResultFormatCBanerPb_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, docs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, msg2_),
  };
  ResultFormatCBanerPb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultFormatCBanerPb_descriptor_,
      ResultFormatCBanerPb::default_instance_,
      ResultFormatCBanerPb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultFormatCBanerPb));
  ResultFormatCBanerPb_Meta_descriptor_ = ResultFormatCBanerPb_descriptor_->nested_type(0);
  static const int ResultFormatCBanerPb_Meta_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, searched_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, returned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, found_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, restrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, prevpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, nextpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, time_),
  };
  ResultFormatCBanerPb_Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultFormatCBanerPb_Meta_descriptor_,
      ResultFormatCBanerPb_Meta::default_instance_,
      ResultFormatCBanerPb_Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultFormatCBanerPb_Meta));
  ResultFormatCBanerPb_Doc_descriptor_ = ResultFormatCBanerPb_descriptor_->nested_type(1);
  static const int ResultFormatCBanerPb_Doc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Doc, bid_adid_),
  };
  ResultFormatCBanerPb_Doc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultFormatCBanerPb_Doc_descriptor_,
      ResultFormatCBanerPb_Doc::default_instance_,
      ResultFormatCBanerPb_Doc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Doc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultFormatCBanerPb_Doc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultFormatCBanerPb_Doc));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultFormatCBanerPb_descriptor_, &ResultFormatCBanerPb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultFormatCBanerPb_Meta_descriptor_, &ResultFormatCBanerPb_Meta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultFormatCBanerPb_Doc_descriptor_, &ResultFormatCBanerPb_Doc::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete ResultFormatCBanerPb::default_instance_;
  delete ResultFormatCBanerPb_reflection_;
  delete ResultFormatCBanerPb_Meta::default_instance_;
  delete ResultFormatCBanerPb_Meta_reflection_;
  delete ResultFormatCBanerPb_Doc::default_instance_;
  delete ResultFormatCBanerPb_Doc_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\022\002pb\"\260\002\n\024ResultFormatCBanerP"
    "b\022+\n\004meta\030\001 \001(\0132\035.pb.ResultFormatCBanerP"
    "b.Meta\022*\n\004docs\030\002 \003(\0132\034.pb.ResultFormatCB"
    "anerPb.Doc\022\014\n\004code\030\003 \001(\005\022\013\n\003msg\030\004 \001(\014\022\014\n"
    "\004msg2\030\005 \001(\014\032}\n\004Meta\022\020\n\010searched\030\001 \001(\005\022\020\n"
    "\010returned\030\002 \001(\005\022\r\n\005found\030\003 \001(\005\022\020\n\010restri"
    "ct\030\004 \001(\005\022\020\n\010prevpage\030\005 \001(\005\022\020\n\010nextpage\030\006"
    " \001(\005\022\014\n\004time\030\007 \001(\005\032\027\n\003Doc\022\020\n\010bid_adid\030\001 "
    "\001(\014", 323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  ResultFormatCBanerPb::default_instance_ = new ResultFormatCBanerPb();
  ResultFormatCBanerPb_Meta::default_instance_ = new ResultFormatCBanerPb_Meta();
  ResultFormatCBanerPb_Doc::default_instance_ = new ResultFormatCBanerPb_Doc();
  ResultFormatCBanerPb::default_instance_->InitAsDefaultInstance();
  ResultFormatCBanerPb_Meta::default_instance_->InitAsDefaultInstance();
  ResultFormatCBanerPb_Doc::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ResultFormatCBanerPb_Meta::kSearchedFieldNumber;
const int ResultFormatCBanerPb_Meta::kReturnedFieldNumber;
const int ResultFormatCBanerPb_Meta::kFoundFieldNumber;
const int ResultFormatCBanerPb_Meta::kRestrictFieldNumber;
const int ResultFormatCBanerPb_Meta::kPrevpageFieldNumber;
const int ResultFormatCBanerPb_Meta::kNextpageFieldNumber;
const int ResultFormatCBanerPb_Meta::kTimeFieldNumber;
#endif  // !_MSC_VER

ResultFormatCBanerPb_Meta::ResultFormatCBanerPb_Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultFormatCBanerPb_Meta::InitAsDefaultInstance() {
}

ResultFormatCBanerPb_Meta::ResultFormatCBanerPb_Meta(const ResultFormatCBanerPb_Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultFormatCBanerPb_Meta::SharedCtor() {
  _cached_size_ = 0;
  searched_ = 0;
  returned_ = 0;
  found_ = 0;
  restrict_ = 0;
  prevpage_ = 0;
  nextpage_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultFormatCBanerPb_Meta::~ResultFormatCBanerPb_Meta() {
  SharedDtor();
}

void ResultFormatCBanerPb_Meta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultFormatCBanerPb_Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultFormatCBanerPb_Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultFormatCBanerPb_Meta_descriptor_;
}

const ResultFormatCBanerPb_Meta& ResultFormatCBanerPb_Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

ResultFormatCBanerPb_Meta* ResultFormatCBanerPb_Meta::default_instance_ = NULL;

ResultFormatCBanerPb_Meta* ResultFormatCBanerPb_Meta::New() const {
  return new ResultFormatCBanerPb_Meta;
}

void ResultFormatCBanerPb_Meta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    searched_ = 0;
    returned_ = 0;
    found_ = 0;
    restrict_ = 0;
    prevpage_ = 0;
    nextpage_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultFormatCBanerPb_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 searched = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &searched_)));
          set_has_searched();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_returned;
        break;
      }
      
      // optional int32 returned = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returned_)));
          set_has_returned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_found;
        break;
      }
      
      // optional int32 found = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_found:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &found_)));
          set_has_found();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_restrict;
        break;
      }
      
      // optional int32 restrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restrict:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restrict_)));
          set_has_restrict();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prevpage;
        break;
      }
      
      // optional int32 prevpage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prevpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevpage_)));
          set_has_prevpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nextpage;
        break;
      }
      
      // optional int32 nextpage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextpage_)));
          set_has_nextpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }
      
      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultFormatCBanerPb_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 searched = 1;
  if (has_searched()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->searched(), output);
  }
  
  // optional int32 returned = 2;
  if (has_returned()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->returned(), output);
  }
  
  // optional int32 found = 3;
  if (has_found()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->found(), output);
  }
  
  // optional int32 restrict = 4;
  if (has_restrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->restrict(), output);
  }
  
  // optional int32 prevpage = 5;
  if (has_prevpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prevpage(), output);
  }
  
  // optional int32 nextpage = 6;
  if (has_nextpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nextpage(), output);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultFormatCBanerPb_Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 searched = 1;
  if (has_searched()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->searched(), target);
  }
  
  // optional int32 returned = 2;
  if (has_returned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->returned(), target);
  }
  
  // optional int32 found = 3;
  if (has_found()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->found(), target);
  }
  
  // optional int32 restrict = 4;
  if (has_restrict()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->restrict(), target);
  }
  
  // optional int32 prevpage = 5;
  if (has_prevpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prevpage(), target);
  }
  
  // optional int32 nextpage = 6;
  if (has_nextpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nextpage(), target);
  }
  
  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultFormatCBanerPb_Meta::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 searched = 1;
    if (has_searched()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->searched());
    }
    
    // optional int32 returned = 2;
    if (has_returned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returned());
    }
    
    // optional int32 found = 3;
    if (has_found()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->found());
    }
    
    // optional int32 restrict = 4;
    if (has_restrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restrict());
    }
    
    // optional int32 prevpage = 5;
    if (has_prevpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prevpage());
    }
    
    // optional int32 nextpage = 6;
    if (has_nextpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextpage());
    }
    
    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultFormatCBanerPb_Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultFormatCBanerPb_Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultFormatCBanerPb_Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultFormatCBanerPb_Meta::MergeFrom(const ResultFormatCBanerPb_Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_searched()) {
      set_searched(from.searched());
    }
    if (from.has_returned()) {
      set_returned(from.returned());
    }
    if (from.has_found()) {
      set_found(from.found());
    }
    if (from.has_restrict()) {
      set_restrict(from.restrict());
    }
    if (from.has_prevpage()) {
      set_prevpage(from.prevpage());
    }
    if (from.has_nextpage()) {
      set_nextpage(from.nextpage());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultFormatCBanerPb_Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultFormatCBanerPb_Meta::CopyFrom(const ResultFormatCBanerPb_Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultFormatCBanerPb_Meta::IsInitialized() const {
  
  return true;
}

void ResultFormatCBanerPb_Meta::Swap(ResultFormatCBanerPb_Meta* other) {
  if (other != this) {
    std::swap(searched_, other->searched_);
    std::swap(returned_, other->returned_);
    std::swap(found_, other->found_);
    std::swap(restrict_, other->restrict_);
    std::swap(prevpage_, other->prevpage_);
    std::swap(nextpage_, other->nextpage_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultFormatCBanerPb_Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultFormatCBanerPb_Meta_descriptor_;
  metadata.reflection = ResultFormatCBanerPb_Meta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResultFormatCBanerPb_Doc::kBidAdidFieldNumber;
#endif  // !_MSC_VER

ResultFormatCBanerPb_Doc::ResultFormatCBanerPb_Doc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultFormatCBanerPb_Doc::InitAsDefaultInstance() {
}

ResultFormatCBanerPb_Doc::ResultFormatCBanerPb_Doc(const ResultFormatCBanerPb_Doc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultFormatCBanerPb_Doc::SharedCtor() {
  _cached_size_ = 0;
  bid_adid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultFormatCBanerPb_Doc::~ResultFormatCBanerPb_Doc() {
  SharedDtor();
}

void ResultFormatCBanerPb_Doc::SharedDtor() {
  if (bid_adid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_adid_;
  }
  if (this != default_instance_) {
  }
}

void ResultFormatCBanerPb_Doc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultFormatCBanerPb_Doc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultFormatCBanerPb_Doc_descriptor_;
}

const ResultFormatCBanerPb_Doc& ResultFormatCBanerPb_Doc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

ResultFormatCBanerPb_Doc* ResultFormatCBanerPb_Doc::default_instance_ = NULL;

ResultFormatCBanerPb_Doc* ResultFormatCBanerPb_Doc::New() const {
  return new ResultFormatCBanerPb_Doc;
}

void ResultFormatCBanerPb_Doc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bid_adid()) {
      if (bid_adid_ != &::google::protobuf::internal::kEmptyString) {
        bid_adid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultFormatCBanerPb_Doc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bid_adid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid_adid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultFormatCBanerPb_Doc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes bid_adid = 1;
  if (has_bid_adid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bid_adid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultFormatCBanerPb_Doc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes bid_adid = 1;
  if (has_bid_adid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bid_adid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultFormatCBanerPb_Doc::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bid_adid = 1;
    if (has_bid_adid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid_adid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultFormatCBanerPb_Doc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultFormatCBanerPb_Doc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultFormatCBanerPb_Doc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultFormatCBanerPb_Doc::MergeFrom(const ResultFormatCBanerPb_Doc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid_adid()) {
      set_bid_adid(from.bid_adid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultFormatCBanerPb_Doc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultFormatCBanerPb_Doc::CopyFrom(const ResultFormatCBanerPb_Doc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultFormatCBanerPb_Doc::IsInitialized() const {
  
  return true;
}

void ResultFormatCBanerPb_Doc::Swap(ResultFormatCBanerPb_Doc* other) {
  if (other != this) {
    std::swap(bid_adid_, other->bid_adid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultFormatCBanerPb_Doc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultFormatCBanerPb_Doc_descriptor_;
  metadata.reflection = ResultFormatCBanerPb_Doc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResultFormatCBanerPb::kMetaFieldNumber;
const int ResultFormatCBanerPb::kDocsFieldNumber;
const int ResultFormatCBanerPb::kCodeFieldNumber;
const int ResultFormatCBanerPb::kMsgFieldNumber;
const int ResultFormatCBanerPb::kMsg2FieldNumber;
#endif  // !_MSC_VER

ResultFormatCBanerPb::ResultFormatCBanerPb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultFormatCBanerPb::InitAsDefaultInstance() {
  meta_ = const_cast< ::pb::ResultFormatCBanerPb_Meta*>(&::pb::ResultFormatCBanerPb_Meta::default_instance());
}

ResultFormatCBanerPb::ResultFormatCBanerPb(const ResultFormatCBanerPb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultFormatCBanerPb::SharedCtor() {
  _cached_size_ = 0;
  meta_ = NULL;
  code_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultFormatCBanerPb::~ResultFormatCBanerPb() {
  SharedDtor();
}

void ResultFormatCBanerPb::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg2_ != &::google::protobuf::internal::kEmptyString) {
    delete msg2_;
  }
  if (this != default_instance_) {
    delete meta_;
  }
}

void ResultFormatCBanerPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultFormatCBanerPb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultFormatCBanerPb_descriptor_;
}

const ResultFormatCBanerPb& ResultFormatCBanerPb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

ResultFormatCBanerPb* ResultFormatCBanerPb::default_instance_ = NULL;

ResultFormatCBanerPb* ResultFormatCBanerPb::New() const {
  return new ResultFormatCBanerPb;
}

void ResultFormatCBanerPb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_meta()) {
      if (meta_ != NULL) meta_->::pb::ResultFormatCBanerPb_Meta::Clear();
    }
    code_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_msg2()) {
      if (msg2_ != &::google::protobuf::internal::kEmptyString) {
        msg2_->clear();
      }
    }
  }
  docs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultFormatCBanerPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ResultFormatCBanerPb.Meta meta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_docs;
        break;
      }
      
      // repeated .pb.ResultFormatCBanerPb.Doc docs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_docs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_docs;
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }
      
      // optional int32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg;
        break;
      }
      
      // optional bytes msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg2;
        break;
      }
      
      // optional bytes msg2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultFormatCBanerPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .pb.ResultFormatCBanerPb.Meta meta = 1;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->meta(), output);
  }
  
  // repeated .pb.ResultFormatCBanerPb.Doc docs = 2;
  for (int i = 0; i < this->docs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->docs(i), output);
  }
  
  // optional int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }
  
  // optional bytes msg = 4;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msg(), output);
  }
  
  // optional bytes msg2 = 5;
  if (has_msg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->msg2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultFormatCBanerPb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .pb.ResultFormatCBanerPb.Meta meta = 1;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->meta(), target);
  }
  
  // repeated .pb.ResultFormatCBanerPb.Doc docs = 2;
  for (int i = 0; i < this->docs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->docs(i), target);
  }
  
  // optional int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }
  
  // optional bytes msg = 4;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }
  
  // optional bytes msg2 = 5;
  if (has_msg2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultFormatCBanerPb::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ResultFormatCBanerPb.Meta meta = 1;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta());
    }
    
    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
    // optional bytes msg = 4;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }
    
    // optional bytes msg2 = 5;
    if (has_msg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg2());
    }
    
  }
  // repeated .pb.ResultFormatCBanerPb.Doc docs = 2;
  total_size += 1 * this->docs_size();
  for (int i = 0; i < this->docs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->docs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultFormatCBanerPb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultFormatCBanerPb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultFormatCBanerPb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultFormatCBanerPb::MergeFrom(const ResultFormatCBanerPb& from) {
  GOOGLE_CHECK_NE(&from, this);
  docs_.MergeFrom(from.docs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta()) {
      mutable_meta()->::pb::ResultFormatCBanerPb_Meta::MergeFrom(from.meta());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_msg2()) {
      set_msg2(from.msg2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultFormatCBanerPb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultFormatCBanerPb::CopyFrom(const ResultFormatCBanerPb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultFormatCBanerPb::IsInitialized() const {
  
  return true;
}

void ResultFormatCBanerPb::Swap(ResultFormatCBanerPb* other) {
  if (other != this) {
    std::swap(meta_, other->meta_);
    docs_.Swap(&other->docs_);
    std::swap(code_, other->code_);
    std::swap(msg_, other->msg_);
    std::swap(msg2_, other->msg2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultFormatCBanerPb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultFormatCBanerPb_descriptor_;
  metadata.reflection = ResultFormatCBanerPb_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
